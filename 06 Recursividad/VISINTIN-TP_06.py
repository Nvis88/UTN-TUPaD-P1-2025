# 1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. 
# Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial 
# de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario

def factorial(num):
    """
    Funci√≥n factorial(num) calcula el factorial de un n√∫mero entero y positivo num.

    Args:
        num (int): N√∫mero entero y positivo del cual se calcula el factorial.
    
    Returns:
        int: Factorial del n√∫mero num.
    """
    # Caso Base: Factorial de 0 es 1
    if num == 0:
        return 1
    else:
        return num * factorial(num - 1)
    
# Solicitamos al usuario un n√∫mero entero y positivo:
print("C√°lculo del factorial de un n√∫mero entero y positivo.")
num = int(input("Ingresa un n√∫mero: "))
while num < 0:
    print("N√∫mero inv√°lido. Se debe ingresar un np√∫mero entero y positivo.")
    num = int(input("Ingresa un n√∫mero entero y positivo: "))
# Llamada a la funci√≥n Factorial:
print(f"El factorial de {num} es: {factorial(num)}")


# 2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci 
# en la posici√≥n indicada. Posteriormente, muestra la serie completa hasta la 
# posici√≥n que el usuario especifique.
def fibonacci(num):
    """
    Funci√≥n fibonacci(num) calcula la serie de Fibonacci hasta la posici√≥n num.

    Args:
        num (int): N√∫mero entero y positivo que representa la posici√≥n de Fibonacci deseada.
    
    Returns:
        list: Lista con los valores de la serie de Fibonacci hasta la posici√≥n num.
    """
    # Casos Base:
    if num == 0:
        return [0]
    elif num == 1:
        return [0, 1]
    # Caso Recursivo:
    else:
        serie_fibonacci = fibonacci(num - 1)
        serie_fibonacci.append(serie_fibonacci[-1] + serie_fibonacci[-2])
        return serie_fibonacci

# Se solicita al usuario que ingrese posici√≥n de fibonacci deseada.
print("Ingresa un n√∫mero entero y positivo que represente la posici√≥n de Fibonacci deseada.")
num = int(input("Ingresa la posici√≥n Fibonacci:"))

# Se verifica que el n√∫mero ingresado sea v√°lido.
while num < 0:
    print("El valor ingresado es inv√°lido.")
    num = int(input("Ingresa la posici√≥n Fibonacci:"))

# Se llama a la funci√≥n fibonacci:
serie = fibonacci(num)
print(f"El valor correspondiente a la posici√≥n {num} de la serie Fibonacci es: {serie[-1]}")
print(f"La serie completa de Fibonacci hasta la posici√≥n {num} es: {serie}")


# 3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, 
# utilizando la f√≥rmula ùëõ**ùëö= ùëõ ‚àó ùëõ**(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general.

def potencia(base, exp):
    """
    Funci√≥n potencia(base, exp) calcula la potencia exp de un n√∫mero base.
    Args:
        base (int): N√∫mero base.
        exp (int): Exponente al que se eleva la base.
    Returns:
        int: Resultado de base elevado a exp.
    """
    #Caso Base: exp = 0 
    if exp == 0:
        return 1
    else:
        return base * potencia(base, exp - 1)
    
# Se solicita al usuario que ingrese base y exponente:
print("Ingresa una base y un exponente para calcular la potencia.")
base = int(input("Ingresa la base: "))
exp = int(input("Ingresa el exponente (n√∫mero positivo): "))

while exp < 0:
    print("El exponente debe ser un n√∫mero positivo.")
    exp = int(input("Ingresa el exponente (n√∫mero positivo): "))

# Se llama a la funci√≥n potencia e imprime el resultado:
print(f"El resultado de {base} elevado a {exp} es: {potencia(base, exp)}")

# 4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal 
# y devuelva su representaci√≥n en binario como una cadena de texto.

def decimal_binario(num):
    """
    Funci√≥n decimal_binario(num) convierte un n√∫mero entero, positivo en base decimal a binario.
    
    Args:
        num (int): N√∫mero entero positivo en base decimal.
    
    Returns:
        str: Representaci√≥n en binario del n√∫mero decimal.
    """
    # Caso Base:
    if num == 0:
        return "0"
    elif num == 1:
        return "1"
    # Caso Recursivo:
    else:
        return decimal_binario(num // 2) + str(num % 2)
    
# Se solicita al usuario que ingrese un n√∫mero decimal entero y positivo:
num = int(input("Ingresa un n√∫mero entero y positivo en base decimal: "))

# Se verifica que el n√∫mero ingresado sea v√°lido:
while num < 0:
    print("N√∫mero inv√°lido. Se debe ingresar un n√∫mero entero y positivo.")
    num = int(input("Ingresa un n√∫mero entero y positivo en base decimal: "))

# Se llama a la funci√≥n decimal_binario e imprime el resultado:
print(f"El n√∫mero {num} en binario es: {decimal_binario(num)}")


# 5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una 
# cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es.

def es_palindromo(palabra):
    """
    La Funci√≥n es_palindromo(palabra) indica si una palabra es pal√≠ndromo o no.

    Args:
        palabra (str): Palabra a verificar.

    Returns:
        (boolean): True si palabra es pal√≠ndromo, False si no lo es.
    """
    # Caso Base: Si palabra tiene 0 o 1 caracteres, devuelve True
    if len(palabra) == 0 or len(palabra) == 1:
        return True
    # Caso Recursivo: Compara el primer y √∫ltimo car√°cter de la palabra
    elif palabra[0] == palabra[-1]:
        # Se llama a la funci√≥n recursivamente eliminando el primer y √∫ltimo car√°cter
        return es_palindromo(palabra[1:-1])
    else:
        return False

# Se le solicita al usuario que ingrese una palabra:
palabra = input("Ingresa una palabra: ")
# Se llama a la funci√≥n es_palindromo e imprime el resultado:
if es_palindromo(palabra):
    print(f"La palabra '{palabra}' es un pal√≠ndromo.")
else:
    print(f"La palabra '{palabra}' no es un pal√≠ndromo.")


# 6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un 
# n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.

def suma_digitos(num):
    """
    La funci√≥n suma_digitos(n) calcula la suma de todos los d√≠gitos de un n√∫mero entero positivo num.
    
    Args:
        num (int): N√∫mero entero positivo del cual se suman los d√≠gitos.
    
    Returns:
        int: Suma de los d√≠gitos del n√∫mero num.
    """
    #Caso Base:
    if num == 0:
        return 0
    else:
        return num % 10 + suma_digitos(num // 10)

# Se solicita al usuario que ingrese un n√∫mero entero positivo:
num = int(input("Ingresa un n√∫mero entero positivo: "))

# Verifico que el n√∫mero sea v√°lido:
while num < 0:
    print("El n√∫mero ingresado es inv√°lido.")
    num = int(input("Ingresa un n√∫mero entero positivo: "))

# Se llama a la funci√≥n suma_digitos y se imprime el resultado:
print(f"La suma de los d√≠gitos de {num} es: {suma_digitos(num)}")


# 7) Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel 
# m√°s bajo y devuelva el total de bloques que necesita para construir toda la pir√°mide.

def contar_bloques(num):
    """
    Funci√≥n que determina la cantidad de bloques de una pir√°mide con num bloques en su base.

    Args:
        num (int): Cantidad de bloques en la base.

    Returns:
        (int): Cantidad de bloques de la pir√°mide.
    """
    # Caso Base:
    if num == 1:
        return 1
    # Caso Recursivo:
    else:
        return num + contar_bloques(num-1)

# Se solicita al usuario la cantidad de Bloques de la base de la pir√°mide.
num = int(input("Jaimito, ¬øcu√°ntos bloques hay en la base? "))

# Se verifica que el dato ingresado sea un n√∫mero entero y mayor a cero.
while num < 1:
    num = int(input("El dato es inv√°lido, ¬øcu√°ntos bloques hay en la base? "))

# Se llama a la funci√≥n y se imprime el resultado:
print(contar_bloques(num))


# 8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero entero 
# positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero.

def contar_digito(numero, digito):
    """
    Funci√≥n que recibe 2 par√°metros, n√∫mero y d√≠gito, y cuenta la cantidad de ocurrencias del d√≠gito en numero.

    Args:
        numero (int): N√∫mero sobre el cu√°l realizaremos la b√∫squeda.
        digito (int): D√≠gito a buscar en numero.

    Returns:
        (int): Cantidad de ocurrencias de digito en numero
    """
    
    resto = numero % 10
    modulo = numero // 10

    # Caso Base:
    if modulo == 0:
        return (1 if resto == digito else 0)
    # Caso Recursivo:
    else:
        return (1 if resto == digito else 0) + contar_digito(modulo, digito)
    
# Se solicita al usuario que ingrese un n√∫mero sobre el cu√°l buscar el d√≠gito:
numero = int(input("Ingresa un n√∫mero entero: "))
while numero < 0:
    print("N√∫mero Inv√°lido.")
    numero = int(input("Ingresa un n√∫mero entero: "))

digito = int(input("Ingresa el d√≠gito (0-9) que desees buscar: "))
while 0 > digito > 9:
    print("N√∫mero Inv√°lido.")
    digito = int(input("Ingresa el d√≠gito (0-9) que desees buscar: "))

# Se llama a la funci√≥n e imprime el resultado:
print(f"El d√≠gito {digito} aparece {contar_digito(numero, digito)} veces en el n√∫mero {numero}")